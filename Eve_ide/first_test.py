# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first_test.ui'
#
# Created by: PyQt5 UI code generator 5.13.2
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1235, 822)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/pic/main.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolTipDuration(1)
        MainWindow.setStatusTip("")
        MainWindow.setWhatsThis("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mdi = QtWidgets.QMdiArea(self.centralwidget)
        self.mdi.setGeometry(QtCore.QRect(0, 0, 651, 501))
        self.mdi.setObjectName("mdi")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1235, 30))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuActions = QtWidgets.QMenu(self.menubar)
        self.menuActions.setObjectName("menuActions")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuChoose_background_style = QtWidgets.QMenu(self.menuSettings)
        self.menuChoose_background_style.setObjectName("menuChoose_background_style")
        self.menuProject = QtWidgets.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")
        self.menuNew_Project = QtWidgets.QMenu(self.menuProject)
        self.menuNew_Project.setObjectName("menuNew_Project")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar_file = QtWidgets.QToolBar(MainWindow)
        self.toolBar_file.setObjectName("toolBar_file")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_file)
        self.toolBar_action = QtWidgets.QToolBar(MainWindow)
        self.toolBar_action.setEnabled(True)
        self.toolBar_action.setObjectName("toolBar_action")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_action)
        self.toolBar_edit = QtWidgets.QToolBar(MainWindow)
        self.toolBar_edit.setObjectName("toolBar_edit")
        MainWindow.addToolBar(QtCore.Qt.RightToolBarArea, self.toolBar_edit)
        self.dockWidget_tree = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget_tree.setMouseTracking(False)
        self.dockWidget_tree.setWindowIcon(icon)
        self.dockWidget_tree.setToolTip("")
        self.dockWidget_tree.setWhatsThis("")
        self.dockWidget_tree.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.dockWidget_tree.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.dockWidget_tree.setObjectName("dockWidget_tree")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.tree = QtWidgets.QTreeWidget(self.dockWidgetContents)
        self.tree.setObjectName("tree")
        self.tree.headerItem().setText(0, "1")
        self.gridLayout.addWidget(self.tree, 0, 1, 1, 1)
        self.dockWidget_tree.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_tree)
        self.dockWidget_2 = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget_2.setObjectName("dockWidget_2")
        self.dockWidgetContents_12 = QtWidgets.QWidget()
        self.dockWidgetContents_12.setObjectName("dockWidgetContents_12")
        self.dockWidget_2.setWidget(self.dockWidgetContents_12)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_2)
        self.dock_connection = QtWidgets.QDockWidget(MainWindow)
        self.dock_connection.setObjectName("dock_connection")
        self.dockWidgetContents_15 = QtWidgets.QWidget()
        self.dockWidgetContents_15.setObjectName("dockWidgetContents_15")
        self.dock_connection.setWidget(self.dockWidgetContents_15)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dock_connection)
        self.action_open = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icos/fileopen.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_open.setIcon(icon1)
        self.action_open.setObjectName("action_open")
        self.action_new = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icos/filenew.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_new.setIcon(icon2)
        self.action_new.setObjectName("action_new")
        self.action_save = QtWidgets.QAction(MainWindow)
        self.action_save.setCheckable(False)
        self.action_save.setChecked(False)
        self.action_save.setEnabled(False)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icos/filesave.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_save.setIcon(icon3)
        self.action_save.setObjectName("action_save")
        self.action_saveas = QtWidgets.QAction(MainWindow)
        self.action_saveas.setEnabled(False)
        self.action_saveas.setObjectName("action_saveas")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.action_project_files = QtWidgets.QAction(MainWindow)
        self.action_project_files.setCheckable(True)
        self.action_project_files.setChecked(True)
        self.action_project_files.setObjectName("action_project_files")
        self.actionElumination_View = QtWidgets.QAction(MainWindow)
        self.actionElumination_View.setCheckable(True)
        self.actionElumination_View.setObjectName("actionElumination_View")
        self.actionChange_into_COE = QtWidgets.QAction(MainWindow)
        self.actionChange_into_COE.setEnabled(False)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/pic/change_coe.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_into_COE.setIcon(icon4)
        self.actionChange_into_COE.setObjectName("actionChange_into_COE")
        self.actionChange_into_MIF = QtWidgets.QAction(MainWindow)
        self.actionChange_into_MIF.setEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/pic/change_into_mif.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_into_MIF.setIcon(icon5)
        self.actionChange_into_MIF.setObjectName("actionChange_into_MIF")
        self.actionChange_into_Binary = QtWidgets.QAction(MainWindow)
        self.actionChange_into_Binary.setEnabled(False)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/pic/change_bin.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_into_Binary.setIcon(icon6)
        self.actionChange_into_Binary.setObjectName("actionChange_into_Binary")
        self.actionChange_into_Hex = QtWidgets.QAction(MainWindow)
        self.actionChange_into_Hex.setEnabled(False)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/pic/change_hex.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_into_Hex.setIcon(icon7)
        self.actionChange_into_Hex.setObjectName("actionChange_into_Hex")
        self.actionView_the_Eluminate = QtWidgets.QAction(MainWindow)
        self.actionView_the_Eluminate.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/pic/connect.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionView_the_Eluminate.setIcon(icon8)
        self.actionView_the_Eluminate.setObjectName("actionView_the_Eluminate")
        self.actioncut = QtWidgets.QAction(MainWindow)
        self.actioncut.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/pic/editcut.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actioncut.setIcon(icon9)
        self.actioncut.setObjectName("actioncut")
        self.actionpaste = QtWidgets.QAction(MainWindow)
        self.actionpaste.setEnabled(False)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/pic/editpaste.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionpaste.setIcon(icon10)
        self.actionpaste.setObjectName("actionpaste")
        self.actionindent = QtWidgets.QAction(MainWindow)
        self.actionindent.setEnabled(False)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/pic/editindent.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionindent.setIcon(icon11)
        self.actionindent.setObjectName("actionindent")
        self.actionunindent = QtWidgets.QAction(MainWindow)
        self.actionunindent.setEnabled(False)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/pic/editunindent.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionunindent.setIcon(icon12)
        self.actionunindent.setObjectName("actionunindent")
        self.actioncopy = QtWidgets.QAction(MainWindow)
        self.actioncopy.setEnabled(False)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/pic/editcopy.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actioncopy.setIcon(icon13)
        self.actioncopy.setObjectName("actioncopy")
        self.actionDownload_2 = QtWidgets.QAction(MainWindow)
        self.actionDownload_2.setEnabled(False)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/pic/download.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDownload_2.setIcon(icon14)
        self.actionDownload_2.setObjectName("actionDownload_2")
        self.actionchoose_workspace = QtWidgets.QAction(MainWindow)
        self.actionchoose_workspace.setObjectName("actionchoose_workspace")
        self.actionBuild_output = QtWidgets.QAction(MainWindow)
        self.actionBuild_output.setCheckable(True)
        self.actionBuild_output.setChecked(True)
        self.actionBuild_output.setObjectName("actionBuild_output")
        self.actionWindows = QtWidgets.QAction(MainWindow)
        self.actionWindows.setObjectName("actionWindows")
        self.actionWindowsXP = QtWidgets.QAction(MainWindow)
        self.actionWindowsXP.setObjectName("actionWindowsXP")
        self.actionOpen_Project = QtWidgets.QAction(MainWindow)
        self.actionOpen_Project.setObjectName("actionOpen_Project")
        self.actionWindowsVista = QtWidgets.QAction(MainWindow)
        self.actionWindowsVista.setObjectName("actionWindowsVista")
        self.actionDark = QtWidgets.QAction(MainWindow)
        self.actionDark.setObjectName("actionDark")
        self.actionFusion = QtWidgets.QAction(MainWindow)
        self.actionFusion.setObjectName("actionFusion")
        self.actionChoose_the_port = QtWidgets.QAction(MainWindow)
        self.actionChoose_the_port.setObjectName("actionChoose_the_port")
        self.actionserial_monitor = QtWidgets.QAction(MainWindow)
        self.actionserial_monitor.setObjectName("actionserial_monitor")
        self.actionnew_empty_project = QtWidgets.QAction(MainWindow)
        self.actionnew_empty_project.setObjectName("actionnew_empty_project")
        self.actionnew_gd32vf103_project = QtWidgets.QAction(MainWindow)
        self.actionnew_gd32vf103_project.setObjectName("actionnew_gd32vf103_project")
        self.actionnew_prv332_project = QtWidgets.QAction(MainWindow)
        self.actionnew_prv332_project.setObjectName("actionnew_prv332_project")
        self.menuFile.addAction(self.action_open)
        self.menuFile.addAction(self.action_new)
        self.menuFile.addAction(self.action_save)
        self.menuFile.addAction(self.action_saveas)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addAction(self.actioncopy)
        self.menuEdit.addAction(self.actioncut)
        self.menuEdit.addAction(self.actionpaste)
        self.menuEdit.addAction(self.actionindent)
        self.menuEdit.addAction(self.actionunindent)
        self.menuView.addAction(self.action_project_files)
        self.menuView.addAction(self.actionElumination_View)
        self.menuView.addAction(self.actionBuild_output)
        self.menuActions.addAction(self.actionView_the_Eluminate)
        self.menuActions.addAction(self.actionChange_into_COE)
        self.menuActions.addAction(self.actionChange_into_MIF)
        self.menuActions.addAction(self.actionChange_into_Binary)
        self.menuActions.addAction(self.actionChange_into_Hex)
        self.menuActions.addAction(self.actionDownload_2)
        self.menuChoose_background_style.addAction(self.actionWindows)
        self.menuChoose_background_style.addAction(self.actionWindowsXP)
        self.menuChoose_background_style.addAction(self.actionWindowsVista)
        self.menuChoose_background_style.addAction(self.actionFusion)
        self.menuChoose_background_style.addAction(self.actionDark)
        self.menuSettings.addAction(self.actionchoose_workspace)
        self.menuSettings.addAction(self.menuChoose_background_style.menuAction())
        self.menuSettings.addAction(self.actionChoose_the_port)
        self.menuNew_Project.addAction(self.actionnew_empty_project)
        self.menuNew_Project.addAction(self.actionnew_gd32vf103_project)
        self.menuNew_Project.addAction(self.actionnew_prv332_project)
        self.menuProject.addAction(self.menuNew_Project.menuAction())
        self.menuProject.addAction(self.actionOpen_Project)
        self.menuTools.addAction(self.actionserial_monitor)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuActions.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.toolBar_file.addAction(self.action_new)
        self.toolBar_file.addAction(self.action_open)
        self.toolBar_file.addAction(self.action_save)
        self.toolBar_action.addAction(self.actionView_the_Eluminate)
        self.toolBar_action.addAction(self.actionDownload_2)
        self.toolBar_action.addAction(self.actionChange_into_Hex)
        self.toolBar_action.addAction(self.actionChange_into_COE)
        self.toolBar_action.addAction(self.actionChange_into_Binary)
        self.toolBar_action.addAction(self.actionChange_into_MIF)
        self.toolBar_edit.addAction(self.actioncopy)
        self.toolBar_edit.addAction(self.actioncut)
        self.toolBar_edit.addAction(self.actionpaste)
        self.toolBar_edit.addAction(self.actionindent)
        self.toolBar_edit.addAction(self.actionunindent)

        self.retranslateUi(MainWindow)
        self.actionQuit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Eve IDE"))
        MainWindow.setToolTip(_translate("MainWindow", "ff"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuActions.setTitle(_translate("MainWindow", "Actions"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuChoose_background_style.setTitle(_translate("MainWindow", "Choose background style"))
        self.menuProject.setTitle(_translate("MainWindow", "Project"))
        self.menuNew_Project.setTitle(_translate("MainWindow", "New Project"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.toolBar_file.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.toolBar_action.setWindowTitle(_translate("MainWindow", "toolBar_3"))
        self.toolBar_edit.setWindowTitle(_translate("MainWindow", "toolBar_5"))
        self.dockWidget_tree.setStatusTip(_translate("MainWindow", "tree of files "))
        self.action_open.setText(_translate("MainWindow", "Open"))
        self.action_open.setToolTip(_translate("MainWindow", "Open a file"))
        self.action_open.setStatusTip(_translate("MainWindow", "Click to open a file"))
        self.action_open.setWhatsThis(_translate("MainWindow", "to open a file"))
        self.action_open.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_new.setText(_translate("MainWindow", "New"))
        self.action_new.setToolTip(_translate("MainWindow", "Create a new file"))
        self.action_new.setStatusTip(_translate("MainWindow", "Click to create a new file"))
        self.action_new.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.action_save.setText(_translate("MainWindow", "Save"))
        self.action_save.setToolTip(_translate("MainWindow", "Save the file"))
        self.action_save.setStatusTip(_translate("MainWindow", "Click to save the file"))
        self.action_save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_saveas.setText(_translate("MainWindow", "SaveAs"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.action_project_files.setText(_translate("MainWindow", "Project Files"))
        self.actionElumination_View.setText(_translate("MainWindow", "Simulation View"))
        self.actionElumination_View.setToolTip(_translate("MainWindow", "View the simulation online"))
        self.actionElumination_View.setStatusTip(_translate("MainWindow", "View the simulation online"))
        self.actionChange_into_COE.setText(_translate("MainWindow", "Change into COE"))
        self.actionChange_into_COE.setShortcut(_translate("MainWindow", "Ctrl+Alt+C"))
        self.actionChange_into_MIF.setText(_translate("MainWindow", "Change into MIF"))
        self.actionChange_into_MIF.setShortcut(_translate("MainWindow", "Ctrl+Alt+M"))
        self.actionChange_into_Binary.setText(_translate("MainWindow", "Change into Binary"))
        self.actionChange_into_Binary.setStatusTip(_translate("MainWindow", "Click to Change into Binary"))
        self.actionChange_into_Binary.setShortcut(_translate("MainWindow", "Ctrl+Alt+B"))
        self.actionChange_into_Hex.setText(_translate("MainWindow", "Change into Hex"))
        self.actionChange_into_Hex.setStatusTip(_translate("MainWindow", "Click to Change into Hex"))
        self.actionChange_into_Hex.setShortcut(_translate("MainWindow", "Ctrl+Alt+H"))
        self.actionView_the_Eluminate.setText(_translate("MainWindow", "Simulate online"))
        self.actionView_the_Eluminate.setToolTip(_translate("MainWindow", "Click to Simulate online"))
        self.actionView_the_Eluminate.setStatusTip(_translate("MainWindow", "Click to Simulate online"))
        self.actionView_the_Eluminate.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actioncut.setText(_translate("MainWindow", "cut"))
        self.actioncut.setToolTip(_translate("MainWindow", "Cut text to the clipboard"))
        self.actioncut.setStatusTip(_translate("MainWindow", "Cut text to the clipboard"))
        self.actioncut.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionpaste.setText(_translate("MainWindow", "paste"))
        self.actionpaste.setToolTip(_translate("MainWindow", "Paste in the clipboard\'s tex"))
        self.actionpaste.setStatusTip(_translate("MainWindow", "Paste in the clipboard\'s tex"))
        self.actionpaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionindent.setText(_translate("MainWindow", "indent"))
        self.actionindent.setToolTip(_translate("MainWindow", "Indent the current line or selection"))
        self.actionindent.setStatusTip(_translate("MainWindow", "Indent the current line or selection"))
        self.actionindent.setShortcut(_translate("MainWindow", "Ctrl+["))
        self.actionunindent.setText(_translate("MainWindow", "unindent"))
        self.actionunindent.setToolTip(_translate("MainWindow", "Unindent the current line or selection"))
        self.actionunindent.setStatusTip(_translate("MainWindow", "Unindent the current line or selection"))
        self.actionunindent.setShortcut(_translate("MainWindow", "Ctrl+]"))
        self.actioncopy.setText(_translate("MainWindow", "copy"))
        self.actioncopy.setToolTip(_translate("MainWindow", "Copy text to the clipboard"))
        self.actioncopy.setStatusTip(_translate("MainWindow", "Copy text to the clipboard"))
        self.actioncopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionDownload_2.setText(_translate("MainWindow", "Download"))
        self.actionDownload_2.setToolTip(_translate("MainWindow", "Click to Download into board"))
        self.actionDownload_2.setStatusTip(_translate("MainWindow", "Click to Download into board"))
        self.actionDownload_2.setShortcut(_translate("MainWindow", "Ctrl+Alt+D"))
        self.actionchoose_workspace.setText(_translate("MainWindow", "Choose workspace"))
        self.actionBuild_output.setText(_translate("MainWindow", "Build output"))
        self.actionWindows.setText(_translate("MainWindow", "Windows"))
        self.actionWindowsXP.setText(_translate("MainWindow", "WindowsXP"))
        self.actionOpen_Project.setText(_translate("MainWindow", "Open Project"))
        self.actionWindowsVista.setText(_translate("MainWindow", "WindowsVista"))
        self.actionDark.setText(_translate("MainWindow", "Dark"))
        self.actionFusion.setText(_translate("MainWindow", "Fusion"))
        self.actionChoose_the_port.setText(_translate("MainWindow", "Choose the port "))
        self.actionserial_monitor.setText(_translate("MainWindow", "serial monitor"))
        self.actionnew_empty_project.setText(_translate("MainWindow", "new empty project"))
        self.actionnew_gd32vf103_project.setText(_translate("MainWindow", "new gd32vf103 project"))
        self.actionnew_prv332_project.setText(_translate("MainWindow", "new prv332 project"))
import icons_rc
