
t.elf:     file format elf32-littleriscv
t.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800015c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000dc0 memsz 0x00000dc0 flags r-x
    LOAD off    0x00002000 vaddr 0x20000000 paddr 0x08000dc0 align 2**12
         filesz 0x00000068 memsz 0x00000068 flags rw-
    LOAD off    0x00002068 vaddr 0x20000068 paddr 0x20000068 align 2**12
         filesz 0x00000000 memsz 0x00000094 flags rw-
    LOAD off    0x00002800 vaddr 0x20007800 paddr 0x200000fc align 2**12
         filesz 0x00000000 memsz 0x00000800 flags rw-

Sections:
Idx Name                       Size      VMA       LMA       File off  Algn  Flags
  0 .init                      00000250  08000000  08000000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ilalign                   00000000  08000250  08000250  00002068  2**0  CONTENTS
  2 .text                      00000b3c  08000280  08000280  00001280  2**6  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sdata2._global_impure_ptr 00000004  08000dbc  08000dbc  00001dbc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .lalign                    00000000  08000dc0  08000dc0  00002068  2**0  CONTENTS
  5 .dalign                    00000000  20000000  20000000  00002068  2**0  CONTENTS
  6 .data                      00000068  20000000  08000dc0  00002000  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bss                       00000094  20000068  20000068  00002068  2**2  ALLOC
  8 .stack                     00000800  20007800  200000fc  00002800  2**0  ALLOC
  9 .debug_info                00005420  00000000  00000000  00002068  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev              000013b3  00000000  00000000  00007488  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc                 00001294  00000000  00000000  0000883b  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges             00000408  00000000  00000000  00009ad0  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges              000004a8  00000000  00000000  00009ed8  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_line                000038b6  00000000  00000000  0000a380  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str                 00001693  00000000  00000000  0000dc36  2**0  CONTENTS, READONLY, DEBUGGING
 16 .comment                   00000011  00000000  00000000  0000f2c9  2**0  CONTENTS, READONLY
 17 .riscv.attributes          0000001c  00000000  00000000  0000f2da  2**0  CONTENTS, READONLY
 18 .debug_frame               000007d4  00000000  00000000  0000f2f8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .init	00000000 .init
08000250 l    d  .ilalign	00000000 .ilalign
08000280 l    d  .text	00000000 .text
08000dbc l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
08000dc0 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
20007800 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./RISCV/env_Eclipse/start.o
08000000 l       .init	00000000 vector_base
0800018c l       .init	00000000 _start0800
00000000 l    df *ABS*	00000000 write_hex.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 handlers.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 ./RISCV/env_Eclipse/entry.o
08000654 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 system_gd32vf103.c
00000000 l    df *ABS*	00000000 gd32vf103_usart.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
2000006c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
08000dc0 l       .sdata2._global_impure_ptr	00000000 __fini_array_end
08000dc0 l       .sdata2._global_impure_ptr	00000000 __fini_array_start
08000dc0 l       .sdata2._global_impure_ptr	00000000 __init_array_end
08000dc0 l       .sdata2._global_impure_ptr	00000000 __preinit_array_end
08000dc0 l       .sdata2._global_impure_ptr	00000000 __init_array_start
08000dc0 l       .sdata2._global_impure_ptr	00000000 __preinit_array_start
20000860 g       .data	00000000 __global_pointer$
200000f8 g     O .bss	00000004 errno
00000800 g       *ABS*	00000000 __stack_size
08000a78 g     F .text	00000104 memcpy
080006e4  w    F .text	0000003c handle_trap
08000600  w      .text	00000000 irq_entry
20007800 g       .stack	00000000 _heap_end
08000dbc g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
080009d0 g     F .text	000000a8 __libc_init_array
08000720 g     F .text	00000024 _init
08000974 g     F .text	0000005c __libc_fini_array
080006c0  w    F .text	00000024 handle_nmi
08000b7c g     F .text	00000018 write
080003bc g     F .text	000000b0 write_hex
20000068 g     O .bss	00000004 _global_atexit
08000c88 g     F .text	00000134 __call_exitprocs
20008000 g       .stack	00000000 _sp
0800015c g     F .init	00000000 _start
08000248 g       .init	00000000 enable_mcycle_minstret
08000bdc g     F .text	000000ac __register_exitproc
20000068 g       .bss	00000000 __bss_start
080008f8 g     F .text	0000000c usart_data_transmit
080002b4 g     F .text	00000008 main
08000500  w      .text	00000000 trap_entry
08000240 g       .init	00000000 disable_mcycle_minstret
080002ec g     F .text	00000014 eclic_mode_enable
08000748 g     F .text	000001b0 SystemInit
08000744 g     F .text	00000004 _fini
08000920 g     F .text	00000014 atexit
08000b94 g     F .text	00000048 _write_r
20000060 g     O .data	00000004 _impure_ptr
20000000 g       .dalign	00000000 _data
08000350 g     F .text	0000006c _write
20000068 g       .bss	00000000 _edata
20000100 g       .bss	00000000 _end
08000300  w    F .text	00000050 _put_char
08000dc0 g       .lalign	00000000 _data_lma
08000934 g     F .text	00000040 exit
080002bc g     F .text	00000030 eclic_init
0800046c g     F .text	00000058 _exit
08000904 g     F .text	0000001c usart_flag_get



Disassembly of section .init:

08000000 <vector_base>:
vector_base():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:73
    .weak  CAN1_RX1_IRQHandler
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    j _start
 8000000:	15c0006f          	j	800015c <_start>
	...

0800015c <_start>:
_start():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:167
	.globl _start
	.type _start,@function

_start:

	csrc CSR_MSTATUS, MSTATUS_MIE
 800015c:	30047073          	csrci	mstatus,8
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:169
	/* Jump to logical address first to ensure correct operation of RAM region  */
    la		a0,	_start
 8000160:	00000517          	auipc	a0,0x0
 8000164:	ffc50513          	addi	a0,a0,-4 # 800015c <_start>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:170
    li		a1,	1
 8000168:	00100593          	li	a1,1
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:171
	slli	a1,	a1, 29
 800016c:	01d59593          	slli	a1,a1,0x1d
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:172
    bleu	a1, a0, _start0800
 8000170:	00b57e63          	bgeu	a0,a1,800018c <_start0800>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:173
    srli	a1,	a1, 2
 8000174:	0025d593          	srli	a1,a1,0x2
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:174
    bleu	a1, a0, _start0800
 8000178:	00b57a63          	bgeu	a0,a1,800018c <_start0800>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:175
    la		a0,	_start0800
 800017c:	00000517          	auipc	a0,0x0
 8000180:	01050513          	addi	a0,a0,16 # 800018c <_start0800>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:176
    add		a0, a0, a1
 8000184:	00b50533          	add	a0,a0,a1
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:177
	jr      a0
 8000188:	00050067          	jr	a0

0800018c <_start0800>:
_start0800():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:182

_start0800:

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 800018c:	20000293          	li	t0,512
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:183
    csrs CSR_MMISC_CTL, t0
 8000190:	7d02a073          	csrs	0x7d0,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:186

	/* Intial the mtvt*/
    la t0, vector_base
 8000194:	00000297          	auipc	t0,0x0
 8000198:	e6c28293          	addi	t0,t0,-404 # 8000000 <vector_base>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:187
    csrw CSR_MTVT, t0
 800019c:	30729073          	csrw	0x307,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:190

	/* Intial the mtvt2 and enable it*/
    la t0, irq_entry
 80001a0:	00000297          	auipc	t0,0x0
 80001a4:	46028293          	addi	t0,t0,1120 # 8000600 <irq_entry>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:191
    csrw CSR_MTVT2, t0
 80001a8:	7ec29073          	csrw	0x7ec,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:192
    csrs CSR_MTVT2, 0x1
 80001ac:	7ec0e073          	csrsi	0x7ec,1
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:195

    /* Intial the CSR MTVEC for the Trap ane NMI base addr*/
    la t0, trap_entry
 80001b0:	00000297          	auipc	t0,0x0
 80001b4:	35028293          	addi	t0,t0,848 # 8000500 <trap_entry>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:196
    csrw CSR_MTVEC, t0
 80001b8:	30529073          	csrw	mtvec,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:207
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80001bc:	18000197          	auipc	gp,0x18000
 80001c0:	6a418193          	addi	gp,gp,1700 # 20000860 <__global_pointer$>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:209
.option pop
	la sp, _sp
 80001c4:	18008117          	auipc	sp,0x18008
 80001c8:	e3c10113          	addi	sp,sp,-452 # 20008000 <_sp>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:212

	/* Load data section */
	la a0, _data_lma
 80001cc:	00001517          	auipc	a0,0x1
 80001d0:	bf450513          	addi	a0,a0,-1036 # 8000dc0 <__fini_array_end>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:213
	la a1, _data
 80001d4:	18000597          	auipc	a1,0x18000
 80001d8:	e2c58593          	addi	a1,a1,-468 # 20000000 <_data>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:214
	la a2, _edata
 80001dc:	18000617          	auipc	a2,0x18000
 80001e0:	e8c60613          	addi	a2,a2,-372 # 20000068 <_global_atexit>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:215
	bgeu a1, a2, 2f
 80001e4:	00c5fc63          	bgeu	a1,a2,80001fc <_start0800+0x70>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:217
1:
	lw t0, (a0)
 80001e8:	00052283          	lw	t0,0(a0)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:218
	sw t0, (a1)
 80001ec:	0055a023          	sw	t0,0(a1)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:219
	addi a0, a0, 4
 80001f0:	00450513          	addi	a0,a0,4
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:220
	addi a1, a1, 4
 80001f4:	00458593          	addi	a1,a1,4
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:221
	bltu a1, a2, 1b
 80001f8:	fec5e8e3          	bltu	a1,a2,80001e8 <_start0800+0x5c>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:224
2:
	/* Clear bss section */
	la a0, __bss_start
 80001fc:	18000517          	auipc	a0,0x18000
 8000200:	e6c50513          	addi	a0,a0,-404 # 20000068 <_global_atexit>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:225
	la a1, _end
 8000204:	8a018593          	addi	a1,gp,-1888 # 20000100 <_end>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:226
	bgeu a0, a1, 2f
 8000208:	00b57863          	bgeu	a0,a1,8000218 <_start0800+0x8c>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:228
1:
	sw zero, (a0)
 800020c:	00052023          	sw	zero,0(a0)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:229
	addi a0, a0, 4
 8000210:	00450513          	addi	a0,a0,4
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:230
	bltu a0, a1, 1b
 8000214:	feb56ce3          	bltu	a0,a1,800020c <_start0800+0x80>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:233
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 8000218:	3202f073          	csrci	mucounteren,5
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:235
	/* Call global constructors */
	la a0, __libc_fini_array
 800021c:	00000517          	auipc	a0,0x0
 8000220:	75850513          	addi	a0,a0,1880 # 8000974 <__libc_fini_array>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:236
	call atexit
 8000224:	6fc000ef          	jal	ra,8000920 <atexit>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:237
	call __libc_init_array
 8000228:	7a8000ef          	jal	ra,80009d0 <__libc_init_array>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:241


	/* argc = argv = 0 */
	li a0, 0
 800022c:	00000513          	li	a0,0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:242
	li a1, 0
 8000230:	00000593          	li	a1,0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:243
	call main
 8000234:	080000ef          	jal	ra,80002b4 <main>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:244
	tail exit
 8000238:	6fc0006f          	j	8000934 <exit>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:247

1:
	j 1b
 800023c:	0000006f          	j	800023c <_start0800+0xb0>

08000240 <disable_mcycle_minstret>:
disable_mcycle_minstret():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:251
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
        csrsi CSR_MCOUNTINHIBIT, 0x5
 8000240:	3202e073          	csrsi	mucounteren,5
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:252
	ret
 8000244:	00008067          	ret

08000248 <enable_mcycle_minstret>:
enable_mcycle_minstret():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:256

	.global enable_mcycle_minstret
enable_mcycle_minstret:
        csrci CSR_MCOUNTINHIBIT, 0x5
 8000248:	3202f073          	csrci	mucounteren,5
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/start.S:257
	ret
 800024c:	00008067          	ret

Disassembly of section .text:

08000280 <main-0x34>:
 8000280:	7830                	flw	fa2,112(s0)
 8000282:	0000                	unimp
 8000284:	500a                	0x500a
 8000286:	6f72                	flw	ft10,28(sp)
 8000288:	6d617267          	0x6d617267
 800028c:	6820                	flw	fs0,80(s0)
 800028e:	7361                	lui	t1,0xffff8
 8000290:	6520                	flw	fs0,72(a0)
 8000292:	6978                	flw	fa4,84(a0)
 8000294:	6574                	flw	fa3,76(a0)
 8000296:	2064                	fld	fs1,192(s0)
 8000298:	68746977          	0x68746977
 800029c:	6320                	flw	fs0,64(a4)
 800029e:	3a65646f          	jal	s0,8056644 <__fini_array_end+0x55884>
 80002a2:	0000                	unimp
 80002a4:	6d6e                	flw	fs10,216(sp)
 80002a6:	0a69                	addi	s4,s4,26
 80002a8:	0000                	unimp
 80002aa:	0000                	unimp
 80002ac:	7274                	flw	fa3,100(a2)
 80002ae:	7061                	c.lui	zero,0xffff8
 80002b0:	000a                	c.slli	zero,0x2
	...

080002b4 <main>:
main():
D:\codes\python\Eve_ide\t\release/../Application/main.c:22
	while (a<10)

		a++;

	function_test;
	}
 80002b4:	00000513          	li	a0,0
 80002b8:	00008067          	ret

080002bc <eclic_init>:
eclic_init():
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:126
{

  typedef volatile uint32_t vuint32_t;

  //clear cfg register 
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 80002bc:	d20007b7          	lui	a5,0xd2000
 80002c0:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ff8000>
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:129

  //clear minthresh register 
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 80002c4:	000785a3          	sb	zero,11(a5)
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:135

  //clear all IP/IE/ATTR/CTRL bits for all interrupt sources
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 80002c8:	00451793          	slli	a5,a0,0x4
 80002cc:	d2001537          	lui	a0,0xd2001
 80002d0:	00f50533          	add	a0,a0,a5
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:137

  for (ptr = base; ptr < upper; ptr=ptr+4){
 80002d4:	d20017b7          	lui	a5,0xd2001
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:137 (discriminator 1)
 80002d8:	00a7e463          	bltu	a5,a0,80002e0 <eclic_init+0x24>
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:140
    *ptr = 0;
  }
}
 80002dc:	00008067          	ret
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:138 (discriminator 3)
    *ptr = 0;
 80002e0:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ff9000>
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:137 (discriminator 3)
  for (ptr = base; ptr < upper; ptr=ptr+4){
 80002e4:	01078793          	addi	a5,a5,16
 80002e8:	ff1ff06f          	j	80002d8 <eclic_init+0x1c>

080002ec <eclic_mode_enable>:
eclic_mode_enable():
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:333

	return priority;
}

void eclic_mode_enable() {
  uint32_t mtvec_value = read_csr(mtvec);
 80002ec:	305027f3          	csrr	a5,mtvec
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:334
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 80002f0:	fc07f793          	andi	a5,a5,-64
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:335
  mtvec_value = mtvec_value | 0x00000003;
 80002f4:	0037e793          	ori	a5,a5,3
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:336
  write_csr(mtvec,mtvec_value);
 80002f8:	30579073          	csrw	mtvec,a5
D:\codes\python\Eve_ide\t\release/../RISCV/drivers/n200_func.c:337
}
 80002fc:	00008067          	ret

08000300 <_put_char>:
_put_char():
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:40
int puts(const char* string) {
	return _write(0, (const void *) string, strlen(string));
}

int _put_char(int ch)
{
 8000300:	ff010113          	addi	sp,sp,-16
 8000304:	00912223          	sw	s1,4(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:41
    usart_data_transmit(USART0, (uint8_t) ch );
 8000308:	400144b7          	lui	s1,0x40014
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:40
{
 800030c:	00812423          	sw	s0,8(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:41
    usart_data_transmit(USART0, (uint8_t) ch );
 8000310:	0ff57593          	andi	a1,a0,255
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:40
{
 8000314:	00050413          	mv	s0,a0
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:41
    usart_data_transmit(USART0, (uint8_t) ch );
 8000318:	80048513          	addi	a0,s1,-2048 # 40013800 <_sp+0x2000b800>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:40
{
 800031c:	00112623          	sw	ra,12(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:42
    while (usart_flag_get(USART0, USART_FLAG_TBE)== RESET){
 8000320:	80048493          	addi	s1,s1,-2048
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:41
    usart_data_transmit(USART0, (uint8_t) ch );
 8000324:	5d4000ef          	jal	ra,80008f8 <usart_data_transmit>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:42 (discriminator 1)
    while (usart_flag_get(USART0, USART_FLAG_TBE)== RESET){
 8000328:	00700593          	li	a1,7
 800032c:	00048513          	mv	a0,s1
 8000330:	5d4000ef          	jal	ra,8000904 <usart_flag_get>
 8000334:	fe050ae3          	beqz	a0,8000328 <_put_char+0x28>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:46
    }

    return ch;
}
 8000338:	00c12083          	lw	ra,12(sp)
 800033c:	00040513          	mv	a0,s0
 8000340:	00812403          	lw	s0,8(sp)
 8000344:	00412483          	lw	s1,4(sp)
 8000348:	01010113          	addi	sp,sp,16
 800034c:	00008067          	ret

08000350 <_write>:
_write():
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:17
ssize_t _write(int fd, const void* ptr, size_t len) {
 8000350:	fe010113          	addi	sp,sp,-32
 8000354:	00812c23          	sw	s0,24(sp)
 8000358:	00912a23          	sw	s1,20(sp)
 800035c:	01212823          	sw	s2,16(sp)
 8000360:	01312623          	sw	s3,12(sp)
 8000364:	00112e23          	sw	ra,28(sp)
 8000368:	00060493          	mv	s1,a2
 800036c:	00058413          	mv	s0,a1
 8000370:	00c58933          	add	s2,a1,a2
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:25
			if (current[jj] == '\n') {
 8000374:	00a00993          	li	s3,10
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:22 (discriminator 1)
		for (size_t jj = 0; jj < len; jj++) {
 8000378:	03241263          	bne	s0,s2,800039c <_write+0x4c>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:33
}
 800037c:	01c12083          	lw	ra,28(sp)
 8000380:	01812403          	lw	s0,24(sp)
 8000384:	01012903          	lw	s2,16(sp)
 8000388:	00c12983          	lw	s3,12(sp)
 800038c:	00048513          	mv	a0,s1
 8000390:	01412483          	lw	s1,20(sp)
 8000394:	02010113          	addi	sp,sp,32
 8000398:	00008067          	ret
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:23
			_put_char(current[jj]);
 800039c:	00044503          	lbu	a0,0(s0)
 80003a0:	f61ff0ef          	jal	ra,8000300 <_put_char>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:25
			if (current[jj] == '\n') {
 80003a4:	00044783          	lbu	a5,0(s0)
 80003a8:	01379663          	bne	a5,s3,80003b4 <_write+0x64>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:26
				_put_char('\r');
 80003ac:	00d00513          	li	a0,13
 80003b0:	f51ff0ef          	jal	ra,8000300 <_put_char>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write.c:22 (discriminator 2)
		for (size_t jj = 0; jj < len; jj++) {
 80003b4:	00140413          	addi	s0,s0,1
 80003b8:	fc1ff06f          	j	8000378 <_write+0x28>

080003bc <write_hex>:
write_hex():
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:7

#include <stdint.h>
#include <unistd.h>

void write_hex(int fd, unsigned long int hex)
{
 80003bc:	fd010113          	addi	sp,sp,-48
 80003c0:	03212023          	sw	s2,32(sp)
 80003c4:	00058913          	mv	s2,a1
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:11
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
 80003c8:	080005b7          	lui	a1,0x8000
 80003cc:	00200613          	li	a2,2
 80003d0:	28058593          	addi	a1,a1,640 # 8000280 <enable_mcycle_minstret+0x38>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:7
{
 80003d4:	02812423          	sw	s0,40(sp)
 80003d8:	02912223          	sw	s1,36(sp)
 80003dc:	01312e23          	sw	s3,28(sp)
 80003e0:	01412c23          	sw	s4,24(sp)
 80003e4:	01512a23          	sw	s5,20(sp)
 80003e8:	02112623          	sw	ra,44(sp)
 80003ec:	00050493          	mv	s1,a0
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:11
  write(fd , "0x", 2);
 80003f0:	01c00413          	li	s0,28
 80003f4:	788000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:14
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 80003f8:	00f00a13          	li	s4,15
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 80003fc:	00900a93          	li	s5,9
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:12
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 8000400:	ffc00993          	li	s3,-4
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:14
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
 8000404:	008a17b3          	sll	a5,s4,s0
 8000408:	0127f7b3          	and	a5,a5,s2
 800040c:	0087d7b3          	srl	a5,a5,s0
 8000410:	0ff7f793          	andi	a5,a5,255
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8000414:	04fae863          	bltu	s5,a5,8000464 <write_hex+0xa8>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15 (discriminator 1)
 8000418:	03078793          	addi	a5,a5,48
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15 (discriminator 2)
 800041c:	01879793          	slli	a5,a5,0x18
 8000420:	4187d793          	srai	a5,a5,0x18
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:16 (discriminator 2)
    write(fd, &towrite, 1);
 8000424:	00100613          	li	a2,1
 8000428:	00f10593          	addi	a1,sp,15
 800042c:	00048513          	mv	a0,s1
 8000430:	ffc40413          	addi	s0,s0,-4
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15 (discriminator 2)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8000434:	00f107a3          	sb	a5,15(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:16 (discriminator 2)
    write(fd, &towrite, 1);
 8000438:	744000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:12 (discriminator 2)
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
 800043c:	fd3414e3          	bne	s0,s3,8000404 <write_hex+0x48>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:18
  }
}
 8000440:	02c12083          	lw	ra,44(sp)
 8000444:	02812403          	lw	s0,40(sp)
 8000448:	02412483          	lw	s1,36(sp)
 800044c:	02012903          	lw	s2,32(sp)
 8000450:	01c12983          	lw	s3,28(sp)
 8000454:	01812a03          	lw	s4,24(sp)
 8000458:	01412a83          	lw	s5,20(sp)
 800045c:	03010113          	addi	sp,sp,48
 8000460:	00008067          	ret
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/write_hex.c:15 (discriminator 2)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
 8000464:	03778793          	addi	a5,a5,55
 8000468:	fb5ff06f          	j	800041c <write_hex+0x60>

0800046c <_exit>:
_exit():
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:9

#include "stub.h"


void _exit(int code)
{
 800046c:	fd010113          	addi	sp,sp,-48
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:10
  const char message[] = "\nProgram has exited with code:";
 8000470:	080005b7          	lui	a1,0x8000
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:9
{
 8000474:	02812423          	sw	s0,40(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:10
  const char message[] = "\nProgram has exited with code:";
 8000478:	01f00613          	li	a2,31
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:9
{
 800047c:	00050413          	mv	s0,a0
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:10
  const char message[] = "\nProgram has exited with code:";
 8000480:	28458593          	addi	a1,a1,644 # 8000284 <enable_mcycle_minstret+0x3c>
 8000484:	00010513          	mv	a0,sp
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:9
{
 8000488:	02112623          	sw	ra,44(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:10
  const char message[] = "\nProgram has exited with code:";
 800048c:	5ec000ef          	jal	ra,8000a78 <memcpy>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:12

  write(STDERR_FILENO, message, sizeof(message) - 1);
 8000490:	01e00613          	li	a2,30
 8000494:	00010593          	mv	a1,sp
 8000498:	00200513          	li	a0,2
 800049c:	6e0000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:13
  write_hex(STDERR_FILENO, code);
 80004a0:	00040593          	mv	a1,s0
 80004a4:	00200513          	li	a0,2
 80004a8:	f15ff0ef          	jal	ra,80003bc <write_hex>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:14
  write(STDERR_FILENO, "\n", 1);
 80004ac:	080005b7          	lui	a1,0x8000
 80004b0:	00100613          	li	a2,1
 80004b4:	2b058593          	addi	a1,a1,688 # 80002b0 <enable_mcycle_minstret+0x68>
 80004b8:	00200513          	li	a0,2
 80004bc:	6c0000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/stubs/_exit.c:16 (discriminator 1)

  for (;;);
 80004c0:	0000006f          	j	80004c0 <_exit+0x54>
	...

08000500 <trap_entry>:
trap_entry():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:218
trap_entry:
  // Allocate the stack space
 // addi sp, sp, -19*REGBYTES

  // Save the caller saving registers (context)
  SAVE_CONTEXT
 8000500:	fb010113          	addi	sp,sp,-80
 8000504:	00112023          	sw	ra,0(sp)
 8000508:	00412223          	sw	tp,4(sp)
 800050c:	00512423          	sw	t0,8(sp)
 8000510:	00612623          	sw	t1,12(sp)
 8000514:	00712823          	sw	t2,16(sp)
 8000518:	00a12a23          	sw	a0,20(sp)
 800051c:	00b12c23          	sw	a1,24(sp)
 8000520:	00c12e23          	sw	a2,28(sp)
 8000524:	02d12023          	sw	a3,32(sp)
 8000528:	02e12223          	sw	a4,36(sp)
 800052c:	02f12423          	sw	a5,40(sp)
 8000530:	03012623          	sw	a6,44(sp)
 8000534:	03112823          	sw	a7,48(sp)
 8000538:	03c12a23          	sw	t3,52(sp)
 800053c:	03d12c23          	sw	t4,56(sp)
 8000540:	03e12e23          	sw	t5,60(sp)
 8000544:	05f12023          	sw	t6,64(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:220
  // Save the MEPC/Mstatus/Msubm reg
  SAVE_EPC_STATUS
 8000548:	341022f3          	csrr	t0,mepc
 800054c:	04512023          	sw	t0,64(sp)
 8000550:	300022f3          	csrr	t0,mstatus
 8000554:	04512223          	sw	t0,68(sp)
 8000558:	7c4022f3          	csrr	t0,0x7c4
 800055c:	04512423          	sw	t0,72(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:223

     // Set the function argument
  csrr a0, mcause
 8000560:	34202573          	csrr	a0,mcause
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:224
  mv a1, sp
 8000564:	00010593          	mv	a1,sp
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:226
     // Call the function
  call handle_trap
 8000568:	17c000ef          	jal	ra,80006e4 <handle_trap>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:229

  // Restore the MEPC/Mstatus/Msubm reg
  RESTORE_EPC_STATUS
 800056c:	04012283          	lw	t0,64(sp)
 8000570:	34129073          	csrw	mepc,t0
 8000574:	04412283          	lw	t0,68(sp)
 8000578:	30029073          	csrw	mstatus,t0
 800057c:	04812283          	lw	t0,72(sp)
 8000580:	7c429073          	csrw	0x7c4,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:231
  // Restore the caller saving registers (context)
  RESTORE_CONTEXT
 8000584:	00012083          	lw	ra,0(sp)
 8000588:	00412203          	lw	tp,4(sp)
 800058c:	00812283          	lw	t0,8(sp)
 8000590:	00c12303          	lw	t1,12(sp)
 8000594:	01012383          	lw	t2,16(sp)
 8000598:	01412503          	lw	a0,20(sp)
 800059c:	01812583          	lw	a1,24(sp)
 80005a0:	01c12603          	lw	a2,28(sp)
 80005a4:	02012683          	lw	a3,32(sp)
 80005a8:	02412703          	lw	a4,36(sp)
 80005ac:	02812783          	lw	a5,40(sp)
 80005b0:	02c12803          	lw	a6,44(sp)
 80005b4:	03012883          	lw	a7,48(sp)
 80005b8:	03412e03          	lw	t3,52(sp)
 80005bc:	03812e83          	lw	t4,56(sp)
 80005c0:	03c12f03          	lw	t5,60(sp)
 80005c4:	04012f83          	lw	t6,64(sp)
 80005c8:	05010113          	addi	sp,sp,80
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:236

  // De-allocate the stack space
 // addi sp, sp, 19*REGBYTES
  // Return to regular code
  mret
 80005cc:	30200073          	mret
	...

08000600 <irq_entry>:
irq_entry():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:251
.weak irq_entry
irq_entry: // -------------> This label will be set to MTVT2 register
  // Allocate the stack space


  SAVE_CONTEXT// Save 16 regs
 8000600:	fb010113          	addi	sp,sp,-80
 8000604:	00112023          	sw	ra,0(sp)
 8000608:	00412223          	sw	tp,4(sp)
 800060c:	00512423          	sw	t0,8(sp)
 8000610:	00612623          	sw	t1,12(sp)
 8000614:	00712823          	sw	t2,16(sp)
 8000618:	00a12a23          	sw	a0,20(sp)
 800061c:	00b12c23          	sw	a1,24(sp)
 8000620:	00c12e23          	sw	a2,28(sp)
 8000624:	02d12023          	sw	a3,32(sp)
 8000628:	02e12223          	sw	a4,36(sp)
 800062c:	02f12423          	sw	a5,40(sp)
 8000630:	03012623          	sw	a6,44(sp)
 8000634:	03112823          	sw	a7,48(sp)
 8000638:	03c12a23          	sw	t3,52(sp)
 800063c:	03d12c23          	sw	t4,56(sp)
 8000640:	03e12e23          	sw	t5,60(sp)
 8000644:	05f12023          	sw	t6,64(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:254

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 8000648:	7ee8d073          	csrwi	0x7ee,17
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:256
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 800064c:	7ef95073          	csrwi	0x7ef,18
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:258
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 8000650:	7eb9d073          	csrwi	0x7eb,19

08000654 <service_loop>:
service_loop():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:264

service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register
  csrrw ra, CSR_JALMNXTI, ra
 8000654:	7ed090f3          	csrrw	ra,0x7ed,ra
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:269

  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts
 8000658:	30047073          	csrci	mstatus,8
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:271

  LOAD x5,  19*REGBYTES(sp)
 800065c:	04c12283          	lw	t0,76(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:272
  csrw CSR_MSUBM, x5
 8000660:	7c429073          	csrw	0x7c4,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:273
  LOAD x5,  18*REGBYTES(sp)
 8000664:	04812283          	lw	t0,72(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:274
  csrw CSR_MEPC, x5
 8000668:	34129073          	csrw	mepc,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:275
  LOAD x5,  17*REGBYTES(sp)
 800066c:	04412283          	lw	t0,68(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:276
  csrw CSR_MCAUSE, x5
 8000670:	34229073          	csrw	mcause,t0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:279


  RESTORE_CONTEXT
 8000674:	00012083          	lw	ra,0(sp)
 8000678:	00412203          	lw	tp,4(sp)
 800067c:	00812283          	lw	t0,8(sp)
 8000680:	00c12303          	lw	t1,12(sp)
 8000684:	01012383          	lw	t2,16(sp)
 8000688:	01412503          	lw	a0,20(sp)
 800068c:	01812583          	lw	a1,24(sp)
 8000690:	01c12603          	lw	a2,28(sp)
 8000694:	02012683          	lw	a3,32(sp)
 8000698:	02412703          	lw	a4,36(sp)
 800069c:	02812783          	lw	a5,40(sp)
 80006a0:	02c12803          	lw	a6,44(sp)
 80006a4:	03012883          	lw	a7,48(sp)
 80006a8:	03412e03          	lw	t3,52(sp)
 80006ac:	03812e83          	lw	t4,56(sp)
 80006b0:	03c12f03          	lw	t5,60(sp)
 80006b4:	04012f83          	lw	t6,64(sp)
 80006b8:	05010113          	addi	sp,sp,80
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/entry.S:283


  // Return to regular code
  mret
 80006bc:	30200073          	mret

080006c0 <handle_nmi>:
handle_nmi():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:10
#include "riscv_encoding.h"
#include "n200_func.h"

__attribute__((weak)) uintptr_t handle_nmi()
{
  write(1, "nmi\n", 5);
 80006c0:	080005b7          	lui	a1,0x8000
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:9
{
 80006c4:	ff010113          	addi	sp,sp,-16
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:10
  write(1, "nmi\n", 5);
 80006c8:	00500613          	li	a2,5
 80006cc:	2a458593          	addi	a1,a1,676 # 80002a4 <enable_mcycle_minstret+0x5c>
 80006d0:	00100513          	li	a0,1
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:9
{
 80006d4:	00112623          	sw	ra,12(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:10
  write(1, "nmi\n", 5);
 80006d8:	4a4000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:11
  _exit(1);
 80006dc:	00100513          	li	a0,1
 80006e0:	d8dff0ef          	jal	ra,800046c <_exit>

080006e4 <handle_trap>:
handle_trap():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:17
  return 0;
}


__attribute__((weak)) uintptr_t handle_trap(uintptr_t mcause, uintptr_t sp)
{
 80006e4:	ff010113          	addi	sp,sp,-16
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:18
  if(mcause == 0xFFF) {
 80006e8:	000017b7          	lui	a5,0x1
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:17
{
 80006ec:	00812423          	sw	s0,8(sp)
 80006f0:	00112623          	sw	ra,12(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:18
  if(mcause == 0xFFF) {
 80006f4:	fff78793          	addi	a5,a5,-1 # fff <__stack_size+0x7ff>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:17
{
 80006f8:	00050413          	mv	s0,a0
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:18
  if(mcause == 0xFFF) {
 80006fc:	00f51463          	bne	a0,a5,8000704 <handle_trap+0x20>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:19
      handle_nmi();
 8000700:	fc1ff0ef          	jal	ra,80006c0 <handle_nmi>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:21
  }
  write(1, "trap\n", 5);
 8000704:	080005b7          	lui	a1,0x8000
 8000708:	00500613          	li	a2,5
 800070c:	2ac58593          	addi	a1,a1,684 # 80002ac <enable_mcycle_minstret+0x64>
 8000710:	00100513          	li	a0,1
 8000714:	468000ef          	jal	ra,8000b7c <write>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/handlers.c:25
  //printf("In trap handler, the mcause is %d\n", mcause);
  //printf("In trap handler, the mepc is 0x%x\n", read_csr(mepc));
  //printf("In trap handler, the mtval is 0x%x\n", read_csr(mbadaddr));
  _exit(mcause);
 8000718:	00040513          	mv	a0,s0
 800071c:	d51ff0ef          	jal	ra,800046c <_exit>

08000720 <_init>:
_init():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:11
#include "riscv_encoding.h"
#include "n200_func.h"

extern uint32_t disable_mcycle_minstret();
void _init()
{
 8000720:	ff010113          	addi	sp,sp,-16
 8000724:	00112623          	sw	ra,12(sp)
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:12
	SystemInit();
 8000728:	020000ef          	jal	ra,8000748 <SystemInit>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:15

	//ECLIC init
	eclic_init(ECLIC_NUM_INTERRUPTS);
 800072c:	05700513          	li	a0,87
 8000730:	b8dff0ef          	jal	ra,80002bc <eclic_init>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:16
	eclic_mode_enable();
 8000734:	bb9ff0ef          	jal	ra,80002ec <eclic_mode_enable>
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:30
	//switch_m2u_mode();
	
    /* Before enter into main, add the cycle/instret disable by default to save power,
    only use them when needed to measure the cycle/instret */
	disable_mcycle_minstret();
}
 8000738:	00c12083          	lw	ra,12(sp)
 800073c:	01010113          	addi	sp,sp,16
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:29
	disable_mcycle_minstret();
 8000740:	b01ff06f          	j	8000240 <disable_mcycle_minstret>

08000744 <_fini>:
_fini():
D:\codes\python\Eve_ide\t\release/../RISCV/env_Eclipse/init.c:34

void _fini()
{
}
 8000744:	00008067          	ret

08000748 <SystemInit>:
SystemInit():
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:153
*/
void SystemInit(void)
{
    /* reset the RCC clock configuration to the default reset state */
    /* enable IRC8M */
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8000748:	400217b7          	lui	a5,0x40021
 800074c:	0007a703          	lw	a4,0(a5) # 40021000 <_sp+0x20019000>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:156
    
    /* reset SCS, AHBPSC, APB1PSC, APB2PSC, ADCPSC, CKOUT0SEL bits */
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8000750:	e0ff06b7          	lui	a3,0xe0ff0
 8000754:	00c68693          	addi	a3,a3,12 # e0ff000c <_sp+0xc0fe800c>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:153
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8000758:	00176713          	ori	a4,a4,1
 800075c:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:156
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8000760:	0047a703          	lw	a4,4(a5)
 8000764:	00d77733          	and	a4,a4,a3
 8000768:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:160
                  RCU_CFG0_ADCPSC | RCU_CFG0_ADCPSC_2 | RCU_CFG0_CKOUT0SEL);

    /* reset HXTALEN, CKMEN, PLLEN bits */
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800076c:	0007a703          	lw	a4,0(a5)
 8000770:	fef706b7          	lui	a3,0xfef70
 8000774:	fff68693          	addi	a3,a3,-1 # fef6ffff <_sp+0xdef67fff>
 8000778:	00d77733          	and	a4,a4,a3
 800077c:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:163

    /* Reset HXTALBPS bit */
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 8000780:	0007a703          	lw	a4,0(a5)
 8000784:	fffc06b7          	lui	a3,0xfffc0
 8000788:	fff68693          	addi	a3,a3,-1 # fffbffff <_sp+0xdffb7fff>
 800078c:	00d77733          	and	a4,a4,a3
 8000790:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:167

    /* reset PLLSEL, PREDV0_LSB, PLLMF, USBFSPSC bits */
    
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8000794:	0047a703          	lw	a4,4(a5)
 8000798:	df0106b7          	lui	a3,0xdf010
 800079c:	fff68693          	addi	a3,a3,-1 # df00ffff <_sp+0xbf007fff>
 80007a0:	00d77733          	and	a4,a4,a3
 80007a4:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:169
                  RCU_CFG0_USBFSPSC | RCU_CFG0_PLLMF_4);
    RCU_CFG1 = 0x00000000U;
 80007a8:	0207a623          	sw	zero,44(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:172

    /* Reset HXTALEN, CKMEN, PLLEN, PLL1EN and PLL2EN bits */
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 80007ac:	0007a703          	lw	a4,0(a5)
 80007b0:	eaf706b7          	lui	a3,0xeaf70
 80007b4:	fff68693          	addi	a3,a3,-1 # eaf6ffff <_sp+0xcaf67fff>
 80007b8:	00d77733          	and	a4,a4,a3
 80007bc:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:174
    /* disable all interrupts */
    RCU_INT = 0x00FF0000U;
 80007c0:	00ff0737          	lui	a4,0xff0
 80007c4:	00e7a423          	sw	a4,8(a5)
system_clock_108m_hxtal():
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:756
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 80007c8:	0007a683          	lw	a3,0(a5)
 80007cc:	00010737          	lui	a4,0x10
 80007d0:	00e6e6b3          	or	a3,a3,a4
 80007d4:	00d7a023          	sw	a3,0(a5)
 80007d8:	fff70793          	addi	a5,a4,-1 # ffff <__stack_size+0xf7ff>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:761

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 80007dc:	40021737          	lui	a4,0x40021
 80007e0:	00072683          	lw	a3,0(a4) # 40021000 <_sp+0x20019000>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:762
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 80007e4:	00e69613          	slli	a2,a3,0xe
 80007e8:	00064663          	bltz	a2,80007f4 <SystemInit+0xac>
 80007ec:	fff78793          	addi	a5,a5,-1
 80007f0:	fe0798e3          	bnez	a5,80007e0 <SystemInit+0x98>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:765

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 80007f4:	400217b7          	lui	a5,0x40021
 80007f8:	0007a703          	lw	a4,0(a5) # 40021000 <_sp+0x20019000>
 80007fc:	00e71693          	slli	a3,a4,0xe
 8000800:	0006c463          	bltz	a3,8000808 <SystemInit+0xc0>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:766
        while(1){
 8000804:	0000006f          	j	8000804 <SystemInit+0xbc>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:772
        }
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8000808:	0047a703          	lw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:779
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 800080c:	dfc406b7          	lui	a3,0xdfc40
 8000810:	fff68693          	addi	a3,a3,-1 # dfc3ffff <_sp+0xbfc37fff>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:772
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8000814:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:774
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8000818:	0047a703          	lw	a4,4(a5)
 800081c:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:776
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8000820:	0047a703          	lw	a4,4(a5)
 8000824:	40076713          	ori	a4,a4,1024
 8000828:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:779
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 800082c:	0047a703          	lw	a4,4(a5)
 8000830:	00d77733          	and	a4,a4,a3
 8000834:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:780
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 8000838:	0047a703          	lw	a4,4(a5)
 800083c:	202906b7          	lui	a3,0x20290
 8000840:	00d76733          	or	a4,a4,a3
 8000844:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:799
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8000848:	02c7a703          	lw	a4,44(a5)
 800084c:	fffef6b7          	lui	a3,0xfffef
 8000850:	00d77733          	and	a4,a4,a3
 8000854:	02e7a623          	sw	a4,44(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:800
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 8000858:	02c7a703          	lw	a4,44(a5)
 800085c:	000106b7          	lui	a3,0x10
 8000860:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xf711>
 8000864:	00d76733          	or	a4,a4,a3
 8000868:	02e7a623          	sw	a4,44(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:803

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 800086c:	0007a703          	lw	a4,0(a5)
 8000870:	040006b7          	lui	a3,0x4000
 8000874:	00d76733          	or	a4,a4,a3
 8000878:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:805
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 800087c:	400217b7          	lui	a5,0x40021
 8000880:	0007a703          	lw	a4,0(a5) # 40021000 <_sp+0x20019000>
 8000884:	00471693          	slli	a3,a4,0x4
 8000888:	fe06dce3          	bgez	a3,8000880 <SystemInit+0x138>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:809
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 800088c:	0007a703          	lw	a4,0(a5)
 8000890:	100006b7          	lui	a3,0x10000
 8000894:	00d76733          	or	a4,a4,a3
 8000898:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:811
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 800089c:	400217b7          	lui	a5,0x40021
 80008a0:	0007a703          	lw	a4,0(a5) # 40021000 <_sp+0x20019000>
 80008a4:	00271693          	slli	a3,a4,0x2
 80008a8:	fe06dce3          	bgez	a3,80008a0 <SystemInit+0x158>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:816
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 80008ac:	0007a703          	lw	a4,0(a5)
 80008b0:	010006b7          	lui	a3,0x1000
 80008b4:	00d76733          	or	a4,a4,a3
 80008b8:	00e7a023          	sw	a4,0(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:819

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 80008bc:	400217b7          	lui	a5,0x40021
 80008c0:	0007a703          	lw	a4,0(a5) # 40021000 <_sp+0x20019000>
 80008c4:	00671693          	slli	a3,a4,0x6
 80008c8:	fe06dce3          	bgez	a3,80008c0 <SystemInit+0x178>
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:823
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 80008cc:	0047a703          	lw	a4,4(a5)
 80008d0:	ffc77713          	andi	a4,a4,-4
 80008d4:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:824
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 80008d8:	0047a703          	lw	a4,4(a5)
 80008dc:	00276713          	ori	a4,a4,2
 80008e0:	00e7a223          	sw	a4,4(a5)
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:827

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 80008e4:	40021737          	lui	a4,0x40021
 80008e8:	00472783          	lw	a5,4(a4) # 40021004 <_sp+0x20019004>
 80008ec:	0087f793          	andi	a5,a5,8
 80008f0:	fe078ce3          	beqz	a5,80008e8 <SystemInit+0x1a0>
SystemInit():
D:\codes\python\Eve_ide\t\release/../Peripherals/system_gd32vf103.c:178
}
 80008f4:	00008067          	ret

080008f8 <usart_data_transmit>:
usart_data_transmit():
D:\codes\python\Eve_ide\t\release/../Peripherals/Source/gd32vf103_usart.c:248
    \param[out] none
    \retval     none
*/
void usart_data_transmit(uint32_t usart_periph, uint32_t data)
{
    USART_DATA(usart_periph) = USART_DATA_DATA & data;
 80008f8:	1ff5f593          	andi	a1,a1,511
 80008fc:	00b52223          	sw	a1,4(a0) # d2001004 <_sp+0xb1ff9004>
D:\codes\python\Eve_ide\t\release/../Peripherals/Source/gd32vf103_usart.c:249
}
 8000900:	00008067          	ret

08000904 <usart_flag_get>:
usart_flag_get():
D:\codes\python\Eve_ide\t\release/../Peripherals/Source/gd32vf103_usart.c:649
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus usart_flag_get(uint32_t usart_periph, usart_flag_enum flag)
{
    if(RESET != (USART_REG_VAL(usart_periph, flag) & BIT(USART_BIT_POS(flag)))){
 8000904:	0065d793          	srli	a5,a1,0x6
 8000908:	3ff7f793          	andi	a5,a5,1023
 800090c:	00a787b3          	add	a5,a5,a0
 8000910:	0007a503          	lw	a0,0(a5)
 8000914:	00b55533          	srl	a0,a0,a1
D:\codes\python\Eve_ide\t\release/../Peripherals/Source/gd32vf103_usart.c:654
        return SET;
    }else{
        return RESET;
    }
}
 8000918:	00157513          	andi	a0,a0,1
 800091c:	00008067          	ret

08000920 <atexit>:
atexit():
 8000920:	00050593          	mv	a1,a0
 8000924:	00000693          	li	a3,0
 8000928:	00000613          	li	a2,0
 800092c:	00000513          	li	a0,0
 8000930:	2ac0006f          	j	8000bdc <__register_exitproc>

08000934 <exit>:
exit():
 8000934:	ff010113          	addi	sp,sp,-16
 8000938:	00812423          	sw	s0,8(sp)
 800093c:	00112623          	sw	ra,12(sp)
 8000940:	00000797          	auipc	a5,0x0
 8000944:	34878793          	addi	a5,a5,840 # 8000c88 <__call_exitprocs>
 8000948:	00050413          	mv	s0,a0
 800094c:	00078663          	beqz	a5,8000958 <exit+0x24>
 8000950:	00000593          	li	a1,0
 8000954:	334000ef          	jal	ra,8000c88 <__call_exitprocs>
 8000958:	00000517          	auipc	a0,0x0
 800095c:	46452503          	lw	a0,1124(a0) # 8000dbc <_global_impure_ptr>
 8000960:	02852783          	lw	a5,40(a0)
 8000964:	00078463          	beqz	a5,800096c <exit+0x38>
 8000968:	000780e7          	jalr	a5
 800096c:	00040513          	mv	a0,s0
 8000970:	afdff0ef          	jal	ra,800046c <_exit>

08000974 <__libc_fini_array>:
__libc_fini_array():
 8000974:	ff010113          	addi	sp,sp,-16
 8000978:	00000797          	auipc	a5,0x0
 800097c:	44878793          	addi	a5,a5,1096 # 8000dc0 <__fini_array_end>
 8000980:	00812423          	sw	s0,8(sp)
 8000984:	00000417          	auipc	s0,0x0
 8000988:	43c40413          	addi	s0,s0,1084 # 8000dc0 <__fini_array_end>
 800098c:	40f40433          	sub	s0,s0,a5
 8000990:	00912223          	sw	s1,4(sp)
 8000994:	00112623          	sw	ra,12(sp)
 8000998:	40245413          	srai	s0,s0,0x2
 800099c:	00078493          	mv	s1,a5
 80009a0:	00041c63          	bnez	s0,80009b8 <__libc_fini_array+0x44>
 80009a4:	00812403          	lw	s0,8(sp)
 80009a8:	00c12083          	lw	ra,12(sp)
 80009ac:	00412483          	lw	s1,4(sp)
 80009b0:	01010113          	addi	sp,sp,16
 80009b4:	d91ff06f          	j	8000744 <_fini>
 80009b8:	fff40413          	addi	s0,s0,-1
 80009bc:	00241793          	slli	a5,s0,0x2
 80009c0:	00f487b3          	add	a5,s1,a5
 80009c4:	0007a783          	lw	a5,0(a5)
 80009c8:	000780e7          	jalr	a5
 80009cc:	fd5ff06f          	j	80009a0 <__libc_fini_array+0x2c>

080009d0 <__libc_init_array>:
__libc_init_array():
 80009d0:	ff010113          	addi	sp,sp,-16
 80009d4:	00000797          	auipc	a5,0x0
 80009d8:	3ec78793          	addi	a5,a5,1004 # 8000dc0 <__fini_array_end>
 80009dc:	00812423          	sw	s0,8(sp)
 80009e0:	00000417          	auipc	s0,0x0
 80009e4:	3e040413          	addi	s0,s0,992 # 8000dc0 <__fini_array_end>
 80009e8:	40f40433          	sub	s0,s0,a5
 80009ec:	00912223          	sw	s1,4(sp)
 80009f0:	01212023          	sw	s2,0(sp)
 80009f4:	00112623          	sw	ra,12(sp)
 80009f8:	40245413          	srai	s0,s0,0x2
 80009fc:	00000493          	li	s1,0
 8000a00:	00078913          	mv	s2,a5
 8000a04:	04849263          	bne	s1,s0,8000a48 <__libc_init_array+0x78>
 8000a08:	d19ff0ef          	jal	ra,8000720 <_init>
 8000a0c:	00000797          	auipc	a5,0x0
 8000a10:	3b478793          	addi	a5,a5,948 # 8000dc0 <__fini_array_end>
 8000a14:	00000417          	auipc	s0,0x0
 8000a18:	3ac40413          	addi	s0,s0,940 # 8000dc0 <__fini_array_end>
 8000a1c:	40f40433          	sub	s0,s0,a5
 8000a20:	40245413          	srai	s0,s0,0x2
 8000a24:	00000493          	li	s1,0
 8000a28:	00078913          	mv	s2,a5
 8000a2c:	02849a63          	bne	s1,s0,8000a60 <__libc_init_array+0x90>
 8000a30:	00c12083          	lw	ra,12(sp)
 8000a34:	00812403          	lw	s0,8(sp)
 8000a38:	00412483          	lw	s1,4(sp)
 8000a3c:	00012903          	lw	s2,0(sp)
 8000a40:	01010113          	addi	sp,sp,16
 8000a44:	00008067          	ret
 8000a48:	00249793          	slli	a5,s1,0x2
 8000a4c:	00f907b3          	add	a5,s2,a5
 8000a50:	0007a783          	lw	a5,0(a5)
 8000a54:	00148493          	addi	s1,s1,1
 8000a58:	000780e7          	jalr	a5
 8000a5c:	fa9ff06f          	j	8000a04 <__libc_init_array+0x34>
 8000a60:	00249793          	slli	a5,s1,0x2
 8000a64:	00f907b3          	add	a5,s2,a5
 8000a68:	0007a783          	lw	a5,0(a5)
 8000a6c:	00148493          	addi	s1,s1,1
 8000a70:	000780e7          	jalr	a5
 8000a74:	fb9ff06f          	j	8000a2c <__libc_init_array+0x5c>

08000a78 <memcpy>:
memcpy():
 8000a78:	00a5c7b3          	xor	a5,a1,a0
 8000a7c:	0037f793          	andi	a5,a5,3
 8000a80:	00c506b3          	add	a3,a0,a2
 8000a84:	00079663          	bnez	a5,8000a90 <memcpy+0x18>
 8000a88:	00300793          	li	a5,3
 8000a8c:	02c7e263          	bltu	a5,a2,8000ab0 <memcpy+0x38>
 8000a90:	00050793          	mv	a5,a0
 8000a94:	0cd57863          	bgeu	a0,a3,8000b64 <memcpy+0xec>
 8000a98:	0005c703          	lbu	a4,0(a1)
 8000a9c:	00178793          	addi	a5,a5,1
 8000aa0:	00158593          	addi	a1,a1,1
 8000aa4:	fee78fa3          	sb	a4,-1(a5)
 8000aa8:	fed7e8e3          	bltu	a5,a3,8000a98 <memcpy+0x20>
 8000aac:	00008067          	ret
 8000ab0:	00357713          	andi	a4,a0,3
 8000ab4:	00050793          	mv	a5,a0
 8000ab8:	00070e63          	beqz	a4,8000ad4 <memcpy+0x5c>
 8000abc:	0005c703          	lbu	a4,0(a1)
 8000ac0:	00178793          	addi	a5,a5,1
 8000ac4:	00158593          	addi	a1,a1,1
 8000ac8:	fee78fa3          	sb	a4,-1(a5)
 8000acc:	0037f713          	andi	a4,a5,3
 8000ad0:	fe9ff06f          	j	8000ab8 <memcpy+0x40>
 8000ad4:	ffc6f713          	andi	a4,a3,-4
 8000ad8:	fe070613          	addi	a2,a4,-32
 8000adc:	04c7fc63          	bgeu	a5,a2,8000b34 <memcpy+0xbc>
 8000ae0:	0005a383          	lw	t2,0(a1)
 8000ae4:	0045a283          	lw	t0,4(a1)
 8000ae8:	0085af83          	lw	t6,8(a1)
 8000aec:	00c5af03          	lw	t5,12(a1)
 8000af0:	0105ae83          	lw	t4,16(a1)
 8000af4:	0145ae03          	lw	t3,20(a1)
 8000af8:	0185a303          	lw	t1,24(a1)
 8000afc:	01c5a883          	lw	a7,28(a1)
 8000b00:	0077a023          	sw	t2,0(a5)
 8000b04:	0057a223          	sw	t0,4(a5)
 8000b08:	0205a803          	lw	a6,32(a1)
 8000b0c:	01f7a423          	sw	t6,8(a5)
 8000b10:	01e7a623          	sw	t5,12(a5)
 8000b14:	01d7a823          	sw	t4,16(a5)
 8000b18:	01c7aa23          	sw	t3,20(a5)
 8000b1c:	0067ac23          	sw	t1,24(a5)
 8000b20:	0117ae23          	sw	a7,28(a5)
 8000b24:	02458593          	addi	a1,a1,36
 8000b28:	02478793          	addi	a5,a5,36
 8000b2c:	ff07ae23          	sw	a6,-4(a5)
 8000b30:	fadff06f          	j	8000adc <memcpy+0x64>
 8000b34:	00058813          	mv	a6,a1
 8000b38:	00078613          	mv	a2,a5
 8000b3c:	02e66663          	bltu	a2,a4,8000b68 <memcpy+0xf0>
 8000b40:	ffd78813          	addi	a6,a5,-3
 8000b44:	00000613          	li	a2,0
 8000b48:	01076863          	bltu	a4,a6,8000b58 <memcpy+0xe0>
 8000b4c:	00370713          	addi	a4,a4,3
 8000b50:	40f70733          	sub	a4,a4,a5
 8000b54:	ffc77613          	andi	a2,a4,-4
 8000b58:	00c787b3          	add	a5,a5,a2
 8000b5c:	00c585b3          	add	a1,a1,a2
 8000b60:	f2d7ece3          	bltu	a5,a3,8000a98 <memcpy+0x20>
 8000b64:	00008067          	ret
 8000b68:	00082883          	lw	a7,0(a6)
 8000b6c:	00460613          	addi	a2,a2,4
 8000b70:	00480813          	addi	a6,a6,4
 8000b74:	ff162e23          	sw	a7,-4(a2)
 8000b78:	fc5ff06f          	j	8000b3c <memcpy+0xc4>

08000b7c <write>:
write():
 8000b7c:	00060693          	mv	a3,a2
 8000b80:	00058613          	mv	a2,a1
 8000b84:	00050593          	mv	a1,a0
 8000b88:	17fff517          	auipc	a0,0x17fff
 8000b8c:	4d852503          	lw	a0,1240(a0) # 20000060 <_impure_ptr>
 8000b90:	0040006f          	j	8000b94 <_write_r>

08000b94 <_write_r>:
_write_r():
 8000b94:	ff010113          	addi	sp,sp,-16
 8000b98:	00812423          	sw	s0,8(sp)
 8000b9c:	00050413          	mv	s0,a0
 8000ba0:	00058513          	mv	a0,a1
 8000ba4:	00060593          	mv	a1,a2
 8000ba8:	00068613          	mv	a2,a3
 8000bac:	8801ac23          	sw	zero,-1896(gp) # 200000f8 <errno>
 8000bb0:	00112623          	sw	ra,12(sp)
 8000bb4:	f9cff0ef          	jal	ra,8000350 <_write>
 8000bb8:	fff00793          	li	a5,-1
 8000bbc:	00f51863          	bne	a0,a5,8000bcc <_write_r+0x38>
 8000bc0:	8981a783          	lw	a5,-1896(gp) # 200000f8 <errno>
 8000bc4:	00078463          	beqz	a5,8000bcc <_write_r+0x38>
 8000bc8:	00f42023          	sw	a5,0(s0)
 8000bcc:	00c12083          	lw	ra,12(sp)
 8000bd0:	00812403          	lw	s0,8(sp)
 8000bd4:	01010113          	addi	sp,sp,16
 8000bd8:	00008067          	ret

08000bdc <__register_exitproc>:
__register_exitproc():
 8000bdc:	00050893          	mv	a7,a0
 8000be0:	17fff517          	auipc	a0,0x17fff
 8000be4:	48850513          	addi	a0,a0,1160 # 20000068 <_global_atexit>
 8000be8:	00052783          	lw	a5,0(a0)
 8000bec:	02079663          	bnez	a5,8000c18 <__register_exitproc+0x3c>
 8000bf0:	17fff717          	auipc	a4,0x17fff
 8000bf4:	47c70713          	addi	a4,a4,1148 # 2000006c <_global_atexit0>
 8000bf8:	00e52023          	sw	a4,0(a0)
 8000bfc:	f7fff517          	auipc	a0,0xf7fff
 8000c00:	40450513          	addi	a0,a0,1028 # 0 <__stack_size-0x800>
 8000c04:	00070793          	mv	a5,a4
 8000c08:	00050863          	beqz	a0,8000c18 <__register_exitproc+0x3c>
 8000c0c:	00052783          	lw	a5,0(a0)
 8000c10:	08f72423          	sw	a5,136(a4)
 8000c14:	00070793          	mv	a5,a4
 8000c18:	0047a703          	lw	a4,4(a5)
 8000c1c:	01f00813          	li	a6,31
 8000c20:	fff00513          	li	a0,-1
 8000c24:	06e84063          	blt	a6,a4,8000c84 <__register_exitproc+0xa8>
 8000c28:	04088263          	beqz	a7,8000c6c <__register_exitproc+0x90>
 8000c2c:	0887a803          	lw	a6,136(a5)
 8000c30:	04080a63          	beqz	a6,8000c84 <__register_exitproc+0xa8>
 8000c34:	00271513          	slli	a0,a4,0x2
 8000c38:	00a80533          	add	a0,a6,a0
 8000c3c:	00c52023          	sw	a2,0(a0)
 8000c40:	10082303          	lw	t1,256(a6)
 8000c44:	00100613          	li	a2,1
 8000c48:	00e61633          	sll	a2,a2,a4
 8000c4c:	00c36333          	or	t1,t1,a2
 8000c50:	10682023          	sw	t1,256(a6)
 8000c54:	08d52023          	sw	a3,128(a0)
 8000c58:	00200693          	li	a3,2
 8000c5c:	00d89863          	bne	a7,a3,8000c6c <__register_exitproc+0x90>
 8000c60:	10482683          	lw	a3,260(a6)
 8000c64:	00c6e633          	or	a2,a3,a2
 8000c68:	10c82223          	sw	a2,260(a6)
 8000c6c:	00170693          	addi	a3,a4,1
 8000c70:	00271713          	slli	a4,a4,0x2
 8000c74:	00d7a223          	sw	a3,4(a5)
 8000c78:	00e787b3          	add	a5,a5,a4
 8000c7c:	00b7a423          	sw	a1,8(a5)
 8000c80:	00000513          	li	a0,0
 8000c84:	00008067          	ret

08000c88 <__call_exitprocs>:
__call_exitprocs():
 8000c88:	fd010113          	addi	sp,sp,-48
 8000c8c:	01412c23          	sw	s4,24(sp)
 8000c90:	01512a23          	sw	s5,20(sp)
 8000c94:	01612823          	sw	s6,16(sp)
 8000c98:	01712623          	sw	s7,12(sp)
 8000c9c:	02112623          	sw	ra,44(sp)
 8000ca0:	02812423          	sw	s0,40(sp)
 8000ca4:	02912223          	sw	s1,36(sp)
 8000ca8:	03212023          	sw	s2,32(sp)
 8000cac:	01312e23          	sw	s3,28(sp)
 8000cb0:	01812423          	sw	s8,8(sp)
 8000cb4:	00050a93          	mv	s5,a0
 8000cb8:	00058a13          	mv	s4,a1
 8000cbc:	17fffb17          	auipc	s6,0x17fff
 8000cc0:	3acb0b13          	addi	s6,s6,940 # 20000068 <_global_atexit>
 8000cc4:	00100b93          	li	s7,1
 8000cc8:	000b2403          	lw	s0,0(s6)
 8000ccc:	00040e63          	beqz	s0,8000ce8 <__call_exitprocs+0x60>
 8000cd0:	00442483          	lw	s1,4(s0)
 8000cd4:	08842983          	lw	s3,136(s0)
 8000cd8:	fff48913          	addi	s2,s1,-1
 8000cdc:	00249493          	slli	s1,s1,0x2
 8000ce0:	009404b3          	add	s1,s0,s1
 8000ce4:	02095a63          	bgez	s2,8000d18 <__call_exitprocs+0x90>
 8000ce8:	02c12083          	lw	ra,44(sp)
 8000cec:	02812403          	lw	s0,40(sp)
 8000cf0:	02412483          	lw	s1,36(sp)
 8000cf4:	02012903          	lw	s2,32(sp)
 8000cf8:	01c12983          	lw	s3,28(sp)
 8000cfc:	01812a03          	lw	s4,24(sp)
 8000d00:	01412a83          	lw	s5,20(sp)
 8000d04:	01012b03          	lw	s6,16(sp)
 8000d08:	00c12b83          	lw	s7,12(sp)
 8000d0c:	00812c03          	lw	s8,8(sp)
 8000d10:	03010113          	addi	sp,sp,48
 8000d14:	00008067          	ret
 8000d18:	020a0263          	beqz	s4,8000d3c <__call_exitprocs+0xb4>
 8000d1c:	00099863          	bnez	s3,8000d2c <__call_exitprocs+0xa4>
 8000d20:	fff90913          	addi	s2,s2,-1
 8000d24:	ffc48493          	addi	s1,s1,-4
 8000d28:	fbdff06f          	j	8000ce4 <__call_exitprocs+0x5c>
 8000d2c:	00291793          	slli	a5,s2,0x2
 8000d30:	00f987b3          	add	a5,s3,a5
 8000d34:	0807a783          	lw	a5,128(a5)
 8000d38:	ff4794e3          	bne	a5,s4,8000d20 <__call_exitprocs+0x98>
 8000d3c:	00442703          	lw	a4,4(s0)
 8000d40:	0044a783          	lw	a5,4(s1)
 8000d44:	fff70713          	addi	a4,a4,-1
 8000d48:	03271e63          	bne	a4,s2,8000d84 <__call_exitprocs+0xfc>
 8000d4c:	01242223          	sw	s2,4(s0)
 8000d50:	fc0788e3          	beqz	a5,8000d20 <__call_exitprocs+0x98>
 8000d54:	00442c03          	lw	s8,4(s0)
 8000d58:	00098a63          	beqz	s3,8000d6c <__call_exitprocs+0xe4>
 8000d5c:	1009a683          	lw	a3,256(s3)
 8000d60:	012b9733          	sll	a4,s7,s2
 8000d64:	00d776b3          	and	a3,a4,a3
 8000d68:	02069263          	bnez	a3,8000d8c <__call_exitprocs+0x104>
 8000d6c:	000780e7          	jalr	a5
 8000d70:	00442703          	lw	a4,4(s0)
 8000d74:	000b2783          	lw	a5,0(s6)
 8000d78:	f58718e3          	bne	a4,s8,8000cc8 <__call_exitprocs+0x40>
 8000d7c:	faf402e3          	beq	s0,a5,8000d20 <__call_exitprocs+0x98>
 8000d80:	f49ff06f          	j	8000cc8 <__call_exitprocs+0x40>
 8000d84:	0004a223          	sw	zero,4(s1)
 8000d88:	fc9ff06f          	j	8000d50 <__call_exitprocs+0xc8>
 8000d8c:	00291693          	slli	a3,s2,0x2
 8000d90:	00d986b3          	add	a3,s3,a3
 8000d94:	0006a583          	lw	a1,0(a3) # 1000000 <__stack_size+0xfff800>
 8000d98:	1049a683          	lw	a3,260(s3)
 8000d9c:	00d77733          	and	a4,a4,a3
 8000da0:	00071863          	bnez	a4,8000db0 <__call_exitprocs+0x128>
 8000da4:	000a8513          	mv	a0,s5
 8000da8:	000780e7          	jalr	a5
 8000dac:	fc5ff06f          	j	8000d70 <__call_exitprocs+0xe8>
 8000db0:	00058513          	mv	a0,a1
 8000db4:	000780e7          	jalr	a5
 8000db8:	fb9ff06f          	j	8000d70 <__call_exitprocs+0xe8>
